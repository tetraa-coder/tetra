#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "connexion.h"
#include "vente.h"
#include <QSpinBox>
#include <QModelIndex>
#include <QPrinter>
#include <QPrintDialog>
#include <QtWidgets>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->tabvente->setModel(tmpvente.afficher());

    ui->comboBox_client->setModel(tmpclient.cafficher()) ;



    ui->comboBox_client_mod->setModel(tmpclient.cafficher()) ;
    this->setWindowTitle("Gestion des vente et achat");

    ui->tabachat->setModel(tmpachat.afficher());
    ui->fr->setModel(tmpfournisseur.fafficher()) ;

    ui->fr_2->setModel(tmpfournisseur.fafficher()) ;
    int qt = tmpvente.calculquantiter();
    QString sqt= QString::number(qt);
    ui->label_18->setText(sqt);

}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_pb_ajouter_clicked()
{
    int idp = ui->lineEdit_idp->text().toInt() ;
    int vqt = ui->spinBoxqt->value() ;
    QString client= ui->comboBox_client->currentText() ;
    QDate vdate=ui->dateEdit->date();
    Vente v(idp,vqt,client,vdate);
  bool test=v.ajouter();
  if(test)
{
    ui->tabvente->setModel(tmpvente.afficher());//refresh


QMessageBox::information(nullptr, QObject::tr("Ajouter une vente"),
                  QObject::tr("Vente ajouter.\n"
                              "Click Cancel to exit."), QMessageBox::Cancel);

QString fileName = QFileDialog::getSaveFileName((QWidget* )0, "Export PDF", QString(), "*.pdf");
    if (QFileInfo(fileName).suffix().isEmpty()) { fileName.append(".pdf"); }

    QPrinter printer(QPrinter::PrinterResolution);
    printer.setOutputFormat(QPrinter::PdfFormat);
    printer.setPaperSize(QPrinter::A4);
    printer.setOutputFileName(fileName);

   QTextDocument doc;
    QString sid = ui->lineEdit_idp->text() ;
    QString sqt = ui->spinBoxqt->text() ;
    QString sclient =ui->comboBox_client->currentText();
    QString sdate=ui->dateEdit->date().toString();

            doc.setHtml("<h1>Information de vente</h1>\n"
                "<h3>Identidiant du produit :</h3>"+sid+"<h3>\n Quantiter du produit :</h3>"+sqt+"<h3>\n Client :</h3>"+sclient+"<h3>\n Date de vente :</h3>"+sdate);


    doc.setPageSize(printer.pageRect().size()); // This is necessary if you want to hide the page number
    doc.print(&printer);


ui->ajouterv->hide();
ui->afficherv->show();


/*notifyIcon=new QSystemTrayIcon(this);
        notifyIcon->setIcon(QIcon("icon.png"));
         notifyIcon->setVisible(true);
         notifyIcon->show();
             notifyIcon->show();
                   notifyIcon->showMessage("Abonner","Abonner ajouter",QSystemTrayIcon::Information,5000);*/

}
  else
      QMessageBox::critical(nullptr, QObject::tr("Ajouter une vente"),
                  QObject::tr("Erreur !.\n"
                              "Click Cancel to exit."), QMessageBox::Cancel);


}


void MainWindow::on_pb_supprimer_clicked()
{

    QModelIndexList indexes = ui->tabvente->selectionModel()->selection().indexes();
    for (int i = 0; i < indexes.count(); ++i)
    {
        QModelIndex index = indexes.at(i);
        int in = index.row()+1;
        // To get the row/column numbers use index.row() / index.column()

        bool test=tmpclient.supprimer(in);
        if (test==true)
          {
            ui->tabvente->setModel(tmpclient.afficher());
            QMessageBox::information(nullptr, QObject::tr("Suppression d'une vente"),
                        QObject::tr("Vente supprimÃ©.\n"
                                   "Click Cancel to exit."), QMessageBox::Cancel);



        }
        else
                QMessageBox::critical(nullptr, QObject::tr("Suppression d'une vente"),
                        QObject::tr("Erreur vente non supprimer !.\n"
                                   "Click Cancel to exit."), QMessageBox::Cancel);

}
    }

void MainWindow::on_pb_modifier_clicked()
{
   ui->afficherv->hide() ;
   ui->modifierv->show();

}


void MainWindow::on_pb_ajouter_2_clicked()
{
    int ida = ui->idp2->text().toInt() ;
    int aqt = ui->qt2->value() ;
    QString fournisseur= ui->fr->currentText() ;
    QDate adate=ui->date2->date();


    Achat a(ida,aqt,fournisseur,adate);
  bool test=a.ajouter();
  if(test)
{
    ui->tabvente->setModel(tmpachat.afficher());//refresh
QMessageBox::information(nullptr, QObject::tr("Ajout d'un achat"),
                  QObject::tr("Achat ajouter.\n"
                              "Click Cancel to exit."), QMessageBox::Cancel);

QString fileName = QFileDialog::getSaveFileName((QWidget* )0, "Export PDF", QString(), "*.pdf");
    if (QFileInfo(fileName).suffix().isEmpty()) { fileName.append(".pdf"); }

    QPrinter printer(QPrinter::PrinterResolution);
    printer.setOutputFormat(QPrinter::PdfFormat);
    printer.setPaperSize(QPrinter::A4);
    printer.setOutputFileName(fileName);

   QTextDocument doc;
    QString sid = ui->idp2->text() ;
    QString sqt = ui->qt2->text() ;
    QString sfournisseur =ui->fr->currentText();
    QString sdate=ui->date2->date().toString();

            doc.setHtml("<h1>Information d'achat </h1>\n"
                "<h3>Identidiant du produit :</h3>"+sid+"<h3>\n Quantiter du produit :</h3>"+sqt+"<h3>\n Fournisseur :</h3>"+sfournisseur+"<h3>\n Date d'achat :</h3>"+sdate);


    doc.setPageSize(printer.pageRect().size()); // This is necessary if you want to hide the page number
    doc.print(&printer);


ui->afficherv_2->show();
ui->ajouterv_2->hide();


}
  else
      QMessageBox::critical(nullptr, QObject::tr("Ajout d'un achat"),
                  QObject::tr("Erreur !.\n"
                              "Click Cancel to exit."), QMessageBox::Cancel);


}



void MainWindow::on_tabvente_activated(const QModelIndex &index)
{
